/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from ../SublimeEthereum/Solidity.tmLanguage (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var SolidityHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = {
        start: [{
            token: "comment.line.solidity",
            regex: "//.*?$",
            //TODO: "FIXME: regexp doesn't have js equivalent",
            originalRegex: "(?<!tp:)//.*?$"
        }, {
            token: "comment.block.solidity",
            regex: /\/\*/,
            push: [{
                token: "comment.block.solidity",
                regex: /\*\//,
                next: "pop"
            }, {
                defaultToken: "comment.block.solidity"
            }]
        }, {
            token: [
                "keyword.control",
                "keyword.control",
                "support.function"
            ],
            regex: /\b(event|enum)(\s+)([A-Za-z_]\w*)\b/,
            comment: "Events"
        }, {
            token: [
                "keyword.control",
                "keyword.control",
                "entity.name.function",
                "keyword.control",
                "entity.name.function"
            ],
            regex: /\b(contract|struct|function|modifier)(\s+)([A-Za-z_]\w*)(?:(\s+is\s+)((?:[A-Za-z_][\,\s]*)*))?\b/,
            comment: "Main keywords"
        }, {
            token: [
                "constant.language",
                "text",
                "variable.parameter",
                "text"
            ],
            regex: /\b(address|string\d*|bytes\d*|int\d*|uint\d*|bool|hash\d*)(?:(\s+)(?:indexed\s+)?([A-Za-z_]\w*)(\s*[,\)]))?/,
            comment: "Built-in types"
        }, {
            token: [
                "constant.language",
                "text",
                "constant.language",
                "text",
                "constant.language",
                "text",
                "keyword.control",
                "text",
                "text"
            ],
            regex: /\b(mapping)(\s*\()(.*)(\s+=>\s+)(.*)(\))((?:\s+(?:private|public|internal|external|inherited))?)(\s+)([A-Za-z_]\w*)\b/,
            comment: "Mapping definition"
        }, {
            token: "constant.language",
            regex: /\b(?:true|false)\b/,
            comment: "True and false keywords"
        }, {
            token: "keyword.control",
            regex: /\b(?:var|import|function|constant|if|else|for|while|do|break|continue|returns?|private|public|internal|external|inherited|this|suicide|new|is|\_)\b/,
            comment: "Langauge keywords"
        }, {
            token: [
                "constant.language",
                "keyword.control",
                "text",
                "text",
                "text"
            ],
            regex: /\b([A-Za-z_]\w+)((?:\s+(?:private|public|internal|external|inherited))?)(\s+)([A-Za-z_]\w*)(\;)/,
            comment: "Variable definitions"
        }, {
            token: "keyword.control",
            regex: /=|!|>|<|\||&/,
            comment: "Operators"
        }, {
            token: [
                "constant.language",
                "text",
                "constant.language"
            ],
            regex: /\b(msg|block|tx)(\.)([A-Za-z_]\w*)\b/,
            comment: "msg and block special usage"
        }, {
            token: ["support.type", "text"],
            regex: /\b([A-Za-z_]\w*)(\s*\()/,
            comment: "Function call"
        }, {
            token: "string.quoted",
            regex: /[\"\'].*?[\"\']/,
            comment: "Strings"
        }, {
            token: "constant.numeric",
            regex: /\b\d+\b/,
            comment: "Numbers"
        }, {
            token: "constant.numeric",
            regex: /\b0[xX][a-fA-F0-9]+\b/,
            comment: "Hexadecimal"
        }, {
            token: "comment",
            regex: /\/\/.*/,
            comment: "Comments"
        }, {
            token: "comment",
            regex: /\/\*/,
            push: [{
                token: "comment",
                regex: /\*\//,
                next: "pop"
            }, {
                defaultToken: "comment"
            }],
            comment: "Multiline comments"
        }]
    }

    this.normalizeRules();
};

SolidityHighlightRules.metaData = {
    fileTypes: ["sol"],
    name: "Solidity",
    scopeName: "source.solidity"
}


oop.inherits(SolidityHighlightRules, TextHighlightRules);

exports.SolidityHighlightRules = SolidityHighlightRules;
});
